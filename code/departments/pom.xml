<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.departments.ipa</groupId>
  <artifactId>departments</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
   <name>departments Maven Webapp</name>
  <url>http://maven.apache.org</url>
  	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
 
	<repositories>
		<repository>
			<id>maven2-repository.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>
	</repositories>
  
  	<dependencies>

  		 <dependency>
            <groupId>com.departments.ipa</groupId>
            <artifactId>dep_core_ipa</artifactId>
            <version>${project.version}</version>
        </dependency>

		<dependency>
			<groupId>com.jcabi</groupId>
			<artifactId>jcabi-aether</artifactId>
			<version>0.7.19</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-core</artifactId>
			<version>3.0.3</version>
		</dependency>
  		
	    <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>3.8.1</version>
	      <scope>test</scope>
	    </dependency>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.21</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.7</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.21</version>
		</dependency>

		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>2.8.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>2.8.1</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-multipart</artifactId>
			<version>2.22.2</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-sse</artifactId>
			<version>2.22.2</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-server</artifactId>
			<version>2.22.2</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>2.22.2</version>
			<!--<scope>runtime</scope>-->
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.test-framework.providers</groupId>
			<artifactId>jersey-test-framework-provider-jetty</artifactId>
			<version>2.22.2</version>
			<!--<scope>test</scope>-->
		</dependency>


  	</dependencies>
  	
    <profiles>
        <profile>
            <id>Jetty</id>
            <dependencies>
	            <dependency>
                    <groupId>com.departments.ipa</groupId>
                    <artifactId>dep_core_ipa</artifactId>
                    <version>${project.version}</version>
                </dependency>
            </dependencies>
         </profile>
   </profiles>
  
  <build>
	  <finalName>departments</finalName>
	  <sourceDirectory>src/main/java</sourceDirectory>
	  <plugins>
		  <plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<warSourceDirectory>WebContent</warSourceDirectory>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
		  </plugin>
		  <plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.2.11.v20150529</version>
		  </plugin>
 
		  <plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
		  </plugin>


          <!-- clean vendor styles and scripts dirs -->
          <plugin>
              <artifactId>maven-clean-plugin</artifactId>  <!-- clean javascript output folders -->
              <version>2.6.1</version>
              <configuration>
                  <excludeDefaultDirectories>false</excludeDefaultDirectories>
                  <filesets>
                      <fileset><directory>src/main/webapp/styles</directory></fileset>
                      <fileset><directory>src/main/webapp/scripts</directory></fileset>
                      <fileset><directory>src/main/webapp/vendor</directory></fileset>
                  </filesets>
              </configuration>
          </plugin>

          <plugin>
              <groupId>com.github.eirslett</groupId>
              <artifactId>frontend-maven-plugin</artifactId>
              <version>1.0</version>

              <executions>
                  <execution>
                      <id>install node and npm</id>
                      <goals>
                          <goal>install-node-and-npm</goal>
                      </goals>
                      <!-- optional: default phase is "generate-resources" -->
                      <phase>generate-resources</phase>
                      <configuration>
                          <nodeVersion>v0.10.18</nodeVersion>
                          <npmVersion>1.3.8</npmVersion>
                          <!-- optional: where to download node and npm from. Defaults to http://nodejs.org/dist/ -->
                          <!-- <downloadRoot>http://myproxy.example.org/nodejs/dist/</downloadRoot> -->
                      </configuration>
                  </execution>

                  <!-- Load all npm packages into local folder -->
                  <execution>
                      <id>npm install</id>
                      <goals>
                          <goal>npm</goal>
                      </goals>
                      <!-- optional: default phase is "generate-resources" -->
                      <phase>generate-resources</phase>
                  </execution>
                  <!-- install all Bower dependencies through grunt -->
                  <execution>
                      <id>grunt dependencies</id>
                      <goals>
                          <goal>grunt</goal>
                      </goals>

                      <!-- optional: the default phase is "generate-resources" -->
                      <phase>generate-resources</phase>

                      <configuration>
                          <!-- optional: if not specified, it will run Grunt's default task
                              (and you can remove this whole <configuration> section.) -->
                          <arguments>bower-install</arguments>
                      </configuration>
                  </execution>


                  <!-- Run javascript tests through karma -->
                  <execution>
                      <id>javascript tests</id>
                      <goals>
                          <goal>karma</goal>
                      </goals>

                      <!-- optional: the default phase is "test". Some developers choose
                          to run karma in the "integration-test" phase. -->
                      <phase>test</phase>

                      <configuration>
                          <!-- optional: the default is "karma.conf.js" in your working directory -->
                          <karmaConfPath>src/test/javascript/karma.conf.ci.js</karmaConfPath>
                      </configuration>
                  </execution>
                  <execution>
                      <id>grunt build</id>
                      <goals>
                          <goal>grunt</goal>
                      </goals>

                      <phase>generate-resources</phase>

                      <configuration>
                          <arguments>build</arguments>
                      </configuration>
                  </execution>
              </executions>

          </plugin>

		</plugins>
  </build>

</project>
